$(document).ready(function() {
    const searchInput = document.getElementById('search-input')
    const searchCapsidButton = document.getElementById('search-capsid-button')
    const openBtn = document.getElementById('openbtn')
    const scatterBtn = document.getElementById('scatter-btn')
    const searchOutput = document.getElementById('search-output')
    const graphContainer = document.getElementById('graph-container')
    var scatterData = {}
    var pieData = {}
    var barData = {}
    var continuousMetrics; var discreteMetrics; var globalData; var filters;
    var margin = {top: 10, right: 30, bottom: 30, left: 60},
        width = 460 - margin.left - margin.right,
        height = 400 - margin.top - margin.bottom;

    var dataRef = firebase.database().ref('/data/')
    var propRef = firebase.database().ref('/properties/')
    var filterRef = firebase.database().ref('/filters/')

    dataRef.get().then(res => {
        globalData = res.val()
    })
    propRef.get().then(res => {
        continuousMetrics = res.val()['continuous']
        discreteMetrics = res.val()['discrete']
    })
    filterRef.get().then(res => {
        filters = res.val()
    })

    searchCapsidButton.addEventListener("click", searchCapsid)
    openBtn.addEventListener("click", toggleNav)
    scatterBtn.addEventListener("click", newScatter)

    function toggleNav() {
      document.getElementById("mySidebar").classList.toggle('show-sidebar')
      document.getElementById("main").classList.toggle('sidebar-margin')
    }


    const average = array => array.reduce((a, b) => a + b) / array.length;
    function capsidWidget(name, data){
       var widget = document.createElement('div')
       var widgetTitle = document.createElement('h3')
       widgetTitle.innerHTML = name
       widget.appendChild(widgetTitle)
       var d = Object.entries(data)
       for (let i=0;i< d.length;i++){
            let k = d[i][0]
            let v = d[i][1]
            if (typeof v != 'object') {
                var fieldTitle = document.createElement('p')
                fieldTitle.innerHTML = k + ': ' + v
                widget.appendChild(fieldTitle)
            }
       }
       searchOutput.appendChild(widget)
    } 
    function stDev (array) {
      const n = array.length
      const mean = array.reduce((a, b) => a + b) / n
      return Math.sqrt(array.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n)
    }
    function filterData(data, fields) {
        console.log(data)
        var lenCnt = data.length
        for(f in fields){
            if (f in continuousMetrics) {
                for (let i=0;i<lenCnt;i++) {
                    if ((!(f in data[i])) || isNaN(data[i][f])) {
                        data.slice(i, 1)
                        lenCnt--
                        i--
                    }
                }
            }
        }
        return data
    }
    function refreshScatter(id){
        var xMetric = scatterData[id]['metrics'][0]
        var yMetric = scatterData[id]['metrics'][1]
        scatterData[id]['data'] = Object.values(globalData).filter(x => (xMetric in x) && (yMetric in x) && !(isNaN(x[xMetric]
        )) && !(isNaN(x[yMetric])))
        var xList = scatterData[id]['data'].map(x => x[xMetric])
        var yList = scatterData[id]['data'].map(y => y[yMetric])
        var xMax = Math.max.apply(null, xList)
        var yMax = Math.max.apply(null, yList)
        var xAve = Math.round(average(xList) * 100) / 100
        var yAve = Math.round(average(yList) * 100) / 100
        var xStdev = Math.round(stDev(xList) * 100) / 100
        var yStdev = Math.round(stDev(yList) * 100) / 100
        var graphEl = document.getElementById(id + 'graph')
        if (graphEl == null) {
            graphEl = document.createElement('div')
            graphEl.id = id + 'graph'
            graphContainer.appendChild(graphEl)
        }
        var svg = d3.select(`#${id}graph`)
          .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform",
                  "translate(" + margin.left + "," + margin.top + ")");
            // SET DOMAIN AND RANGE EDITME
          var x = d3.scaleLinear()
            .domain([0, xMax])
            .range([ 0, width ]);
          svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x));

          // Add Y axis
          var y = d3.scaleLinear()
            .domain([0, yMax])
            .range([ height, 0]);
          svg.append("g")
            .call(d3.axisLeft(y));

          // Add dots
          svg.append('g')
            .selectAll("dot")
            .data(scatterData[id]['data'])
            .enter()
            .append("circle")
              .attr("cx", function (d) { return x(d[xMetric]) } )
              .attr("cy", function (d) { return y(d[yMetric]) } )
              .attr("r", 1.5)
              .style("fill", "#69b3a2")
        graphEl.classList.add('graph-element')
        var xDropdown = document.createElement('select')
        var yDropdown = document.createElement('select')
        xDropdown.id = id + 'xMetric'
        yDropdown.id = id + 'yMetric'
        xDropdown.onChange = (e => console.log(e.target.value))
        yDropdown.onChange = (e => console.log('hi'))
        for (let i=0;i<continuousMetrics.length;i++){
            var m = continuousMetrics[i]
            var dropOption = document.createElement('option')
            dropOption.value = m
            dropOption.innerHTML = m
            if (xMetric == m){
                dropOption.selected = 'selected'
            }
            xDropdown.appendChild(dropOption)
        }
        for (let i=0;i<continuousMetrics.length;i++){
            var m = continuousMetrics[i]
            var dropOption = document.createElement('option')
            dropOption.value = m
            dropOption.innerHTML = m
            if (yMetric == m){
                dropOption.selected = 'selected'
            }
            yDropdown.appendChild(dropOption)
        }
        var xAxisContainer = document.createElement('div')
        var yAxisContainer = document.createElement('div')
        var xAveEl = document.createElement('p')
        var yAveEl = document.createElement('p')
        var xStdevEl = document.createElement('p')
        var yStdevEl = document.createElement('p')
        xAveEl.innerHTML = 'Average: ' + xAve
        yAveEl.innerHTML = 'Average: ' + yAve
        xStdevEl.innerHTML = 'Standard Deviation: ' + xStdev
        yStdevEl.innerHTML = 'Standard Deviation: ' + yStdev
        xAxisContainer.classList.add('x-axis-container')
        yAxisContainer.classList.add('y-axis-container')
        xAxisContainer.appendChild(xAveEl) 
        xAxisContainer.appendChild(xStdevEl) 
        yAxisContainer.appendChild(yAveEl) 
        yAxisContainer.appendChild(yStdevEl) 

        xAxisContainer.appendChild(xDropdown)
        yAxisContainer.appendChild(yDropdown)
        graphEl.appendChild(xAxisContainer)
        graphEl.appendChild(yAxisContainer)

        graphContainer.appendChild(graphEl)
    }
    function newScatter(){
        var widget = document.createElement('div')
        var delBtn = document.createElement('button')
        var id = "id" + Math.random().toString(16).slice(2)
        widget.classList.add('filter-container')
        delBtn.classList.add('fa-trash-o')
        delBtn.classList.add('fa')
        delBtn.addEventListener('click', () => {widget.remove();delete scatterData[id]})
        widget.appendChild(delBtn)
        createFilters(widget)
        graphContainer.appendChild(widget)

        scatterData[id] = {}
        scatterData[id]['metrics'] = getRandom(continuousMetrics, 2)
        refreshScatter(id)
        
        /*
        for (let i=0;i<d.length;i++){
            var passFilter = true
            var name = d[i][0]
            var cdata = d[i][1]
            for (const k in filters){
                for (let j=0;j<filters[k].length;j++){
                    if (cdata[k] != filters[k][j]) passFilter = false
                }
            }
            //if (passFilter) capsidWidget(name,cdata)
            if (passFilter) vs.push(cdata)
        }

        var vs = []
        var count = document.createElement('p')
        count.innerHTML = 'number of results: ' + d.length
        var x = []
        var y = []
        var dObj = []
        for (let i=0;i<vs.length;i++){
            dataObj = {} 
            dataObj[xMetric] = String(vs[i][xMetric])
            dataObj[yMetric] = String(vs[i][yMetric])
            dObj.push(dataObj)
        }
        dScatter(dObj)
        */
    }
    function searchCapsid(){
        if (searchInput.value.length < 4) return
        let searchString = '/data/' + searchInput.value
        var dataRef = firebase.database().ref(searchString)
        dataRef.get().then(res => { 
            searchOutput.innerHTML = ''
            console.log(res.val())
            capsidWidget(searchInput.value, res.val())
            
        });
    }
    function createFilters(widget){
        for (k in filters) {
            var id = "idnumber" + Math.random().toString(16).slice(2)
            var filterTitle = document.createElement('span')
            filterTitle.innerHTML = k
            var filterDropdown = document.createElement('div')
            filterDropdown.classList.add('dropdown')
            var dropContent = document.createElement('div')
            dropContent.id = id
            dropContent.classList.add('dropdown-content')
            
            //add each filter in filters[k] to dropContent
            for (var i=0;i<filters[k].length;i++){
                f = filters[k][i]
                if (!f.length) continue
                var filterInput = document.createElement('input')
                filterInput.id = f
                filterInput.name = f
                filterInput.classList.add('filter-item')
                filterInput.type= 'checkbox'
                var filterLabel = document.createElement('label')
                filterLabel.for = f
                filterLabel.innerHTML = f + '<br>'
                dropContent.appendChild(filterInput)
                dropContent.appendChild(filterLabel)
            }

            filterDropdown.appendChild(dropContent)
            var dropBtn = document.createElement('button')
            dropBtn.classList.add('dropbtn')
            dropBtn.innerHTML = '&#9660;'
            dropBtn.id = k + id
            dropBtn.addEventListener("click", function(e) {
                var srch = e.target.id.slice(e.target.id.indexOf('idnumber'))
                var dropEl = document.getElementById(srch)
                if (dropEl.classList.contains('show')){
                    e.target.innerHTML = '&#9660'
                }   else e.target.innerHTML = '&#9650'
                dropEl.classList.toggle("show")
            })
            filterDropdown.appendChild(dropBtn)
            widget.appendChild(filterTitle)
            widget.appendChild(filterDropdown)
        }
    }
    function getRandom(arr, n) {
        var result = new Array(n),
            len = arr.length,
            taken = new Array(len);
        if (n > len)
            throw new RangeError("getRandom: more elements taken than available");
        while (n--) {
            var x = Math.floor(Math.random() * len);
            result[n] = arr[x in taken ? taken[x] : x];
            taken[x] = --len in taken ? taken[len] : len;
        }
        return result;
    }
    function loadFilters(){
        var filters = document.getElementsByClassName("filter-item");
        var filterObj = {}
        for (let i = 0; i < filters.length; i++) {
          if (filters[i].checked) {
            filterClass = filters[i].parentElement.id
            if (!(filterClass in Object.keys(filterObj))) filterObj[filterClass] = []
            filterObj[filterClass].push(filters[i].id)
          }
        }
        return filterObj
    }



//Read the data
function dScatter(data) {
// append the svg object to the body of the page
}

})
